package codigo;

import java_cup.runtime.Symbol;

parser code
{:
	public String resultado="";
	public Nodo padre;
	public int contador = 1;


 public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis: "+ s.value +" Linea " +(s.right)+" columna " +(s.left) );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }

/*
  
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

 
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
		System.out.println(s);
	}
*/
:}

action code
{:

:}



terminal Identificador,  Numero, Cadena, Comilla, parentesisE, parentesisC, Integer,Double,OperadorRelacional,Boolean,Punto,llaveE,
    llaveC, corcheteE, corcheteC,End,OPRestSuma,OPMultDiv, Enter,ContinuacionLinea,Comentario, Igual, ERROR, Else, Main, Op_Booleano,
    Sub, SentenciaModulo, Declaracion,For, IF,While,Do,OR,And,concatenacion,then,Function,Return,Dim,AS,struct, Console, TO,
    WriteLine, coma, String, Next, ReadLine, Loop, New,RMain,
    espacio
/* Declarados*/
   
;


/* no terminales */

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, PARA_SUB,  RETORNO, FUNCION, 
    WHILE, DO_WHILE,  SENTENCIA_FOR, VARIABLES, ASIGNACION, VALORES_NUMERICOS, FINAL, CUERPO, LINEAS, GLOBALES, PARAMETROS, TIPODATO,ESTRUCTURA,

/* Para IF SENTENCIA_EMPAREJADA, SENTENCIA_DESMPAREJADA, */
SENTENCIA_IF, LOGICOAND , DECLARACION_IF , ELSE_IF, DECLARACIONES,PARAMETROS2, DATO, IGUALDAD, LLAMADA_FUNCION, PROGRAMA, DESPUES,

/* Para Boolean */
     SENTENCIA_BOOLEANA , LOGICOAND_Prima ,  LOGICOOR, COMPARACION, RECURSION,OP_RECURSIVIDAD, OP_Recursion,

/* Para Aritmeticas */
     ADICIONES , MULTIPLICACIONES,  MULTIPLICACIONES_PRIMA,  ARITMETICOS, CUERPO_ESTRUCTURA, CONCATENABLES, CUERPO_ESTRUCTURA2,

/* Para Imprimir */
IMPRIMIR, CONCATENACION, LEER ,S 
;


/* Precedencia */
precedence left Igual;
precedence left OR;
precedence left And;
precedence left OperadorRelacional;
precedence left OPRestSuma , concatenacion;
precedence left OPMultDiv;
precedence nonassoc Else;



start with PROGRAMA;




INICIO::=SentenciaModulo:n Identificador:n1 CUERPO_ESTRUCTURA:nC Main:n2 parentesisE parentesisC CUERPO:Cuerpo End:n6 Sub:n7 DESPUES FINAL:n8 {:
        
        Nodo nd = new Nodo("INICIO");
        
        nd.setNumNodo(parser.contador++);
        parser.contador++;
        nd.addHijo(new Nodo(n.toString()));
        nd.addHijo(new Nodo(n1.toString()));
        
        if (nC != null)
        nd.addHijo((Nodo)nC);

        nd.addHijo(new Nodo(n2.toString()));
        // E nd.addHijo(new Nodo(n3.toString() + " " + n4.toString()));

        if (Cuerpo != null)
        nd.addHijo((Nodo)Cuerpo);
        //nd.addHijo(new Nodo(n4.toString()));
       // nd.addHijo(new Nodo(n6.toString()));
        //nd.addHijo((Nodo)n5);
        nd.addHijo(new Nodo(n6.toString() + " " + n7.toString()));
        //nd.addHijo((Nodo)nC2); 
        nd.addHijo((Nodo)n8);
     
/*
        */

        parser.padre = (Nodo)nd;

        RESULT = nd;

:};

   VARIABLES::= Identificador:n1 coma VARIABLES:n3  {:
            Nodo nd = new Nodo("VARIABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             // E nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             
             RESULT = nd;


             :} 
             | 
             Identificador:n1{:
             Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            
             RESULT = nd;
 


:};



    TIPODATO::= AS:n1 Integer:n2{:
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; :}                      
            | 
            AS:n1  Boolean:n2{:
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; :} 
 
            | 
            AS:n1  Double:n2{:
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; :}  
            | 
            AS:n1  String:n2{:
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; :} 
            | 
            AS:n1  Identificador:n2{:
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
:} ;


DECLARACION::=  Dim:n1 VARIABLES:n2 TIPODATO:n3 IGUALDAD:n4{:
        Nodo nd = new Nodo("DECLARACION_VAR");
       // E nd.addHijo(new Nodo(n1.toString()));
        nd.setNumNodo(parser.contador++);
        parser.contador++; 
        nd.addHijo((Nodo)n2);
        nd.addHijo((Nodo)n3);


        if (n4 != null)
        nd.addHijo((Nodo)n4);
        RESULT = nd;
:};


IGUALDAD::= Igual:n1 New:n2 Identificador:n3 parentesisE:n4 PARAMETROS2:n5 parentesisC:n6{:
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString() + " " + n2.toString() + " " + n3.toString() ));
            // nd.addHijo(new Nodo(n2.toString()));
            // nd.addHijo(new Nodo(n3.toString()));
            // E nd.addHijo(new Nodo(n4.toString()));
             nd.addHijo((Nodo)n5);
            // E nd.addHijo(new Nodo(n6.toString()));
             
             RESULT = nd;
             :}
            | 
            Igual:n1 DATO:n2 {:
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             RESULT = nd;
             :}
            | 
            Igual:n1 New:n2 parentesisE:n3 parentesisC:n4 {:
            Nodo nd = new Nodo(n1.toString() + " " + n2.toString() + " " + n3.toString() + " " + n4.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             //nd.addHijo(new Nodo(n4.toString()));
             
             RESULT = nd;
             :}
            |
;

PARAMETROS::= Identificador:n1 TIPODATO:n2 coma:n3 PARAMETROS:n4{:
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             
             RESULT = nd;
             :}
              | 
                Identificador:n1 TIPODATO:n2{:
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             RESULT = nd;
             :}
;

DATO::= ARITMETICOS:n1{:
            Nodo nd = (Nodo)n1;
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo((Nodo)n1);

             RESULT = nd;
             :}
            | 
            Op_Booleano:n1{:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));

             RESULT = nd;
             :} 
            |
            Cadena:n1{:
            Nodo nd = new Nodo (n1.toString());
            //Nodo nhijo = new Nodo("Cadena");
            //nhijo.setValor(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo (nhijo.getValor()));
             
                //System.out.println();
             RESULT = nd;
             :} 
            | 
            LEER:n1{:
            Nodo nd = (Nodo)n1;
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo((Nodo)n1);

             RESULT = nd;
             :}  ;

PARAMETROS2::=  DATO:n1 coma:n2 PARAMETROS2:n3{:
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
             //nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             
             RESULT = nd;
             :} 
            | 
            DATO:n1{:
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
             
             RESULT = nd;
             :} ;

ESTRUCTURA::= struct:n1 Identificador:n2 CUERPO_ESTRUCTURA:n3 End:n4 struct:n5{:
            Nodo nd = new Nodo("ESTRUCTURA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             if (n3 != null)
             nd.addHijo((Nodo)n3);

             nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             
             RESULT = nd;
             :};

/* Para Funciones y Estructuras */







  CUERPO_ESTRUCTURA::=  DECLARACION:n1 Enter  CUERPO_ESTRUCTURA:n2 {:
        Nodo nd = new Nodo("CUERPO_FUNCIONES");
        nd.setNumNodo(parser.contador++);
        parser.contador++;
        nd.addHijo((Nodo)n1);

        if (n2 != null)
        nd.addHijo((Nodo)n2);
        RESULT = nd;  :} 
        |       
        ESTRUCTURA:n1 Enter  CUERPO_ESTRUCTURA:n2 {:
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  :}
        |       
        FUNCION:n1 Enter CUERPO_ESTRUCTURA:n2 {:
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  :}
         |       
        PARA_SUB:n1 Enter CUERPO_ESTRUCTURA:n2 {:
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  :} 
        | Enter:x CUERPO_ESTRUCTURA:n2 {:
              
            if (n2 != null)
            RESULT = n2;


        :}
        | 

;
 PARA_SUB::= Sub:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 CUERPO:n6 End:n7 Sub:n8{:
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             
             RESULT = nd;
             :}
            | 
            Sub:n1 Identificador:n2 parentesisE:n3  parentesisC:n4 CUERPO:n5 End:n6 Sub:n7{:
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + "" + n3.toString()+""+n4.toString()));
            // nd.addHijo(new Nodo());
             
             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             
             RESULT = nd;
             :}
            | 
            Sub:n1 New:n2 parentesisE:n3  parentesisC:n4 CUERPO:n5 End:n6 Sub:n7{:
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
            // nd.addHijo(new Nodo(n3.toString()+" "+n4.toString()));

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             
             RESULT = nd;
             :}
            | 
            Sub:n1 New:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 CUERPO:n6 End:n7 Sub:n8{:
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             
             RESULT = nd;
             :};


RETORNO::= Return:n1 Numero:n2{:
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             :}
           | 
            Return:n1 Identificador:n2 {:
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             :}
           | 
            Return:n1 Op_Booleano:n2 {:
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             :}
           | 
            Return:n1 Cadena:n2 {:
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             :}
           | 
            Return:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 {:
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             :}
           | 
            Return:n1 RECURSION:n2 {:
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :};

FUNCION::= Function:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 TIPODATO:n6 CUERPO:n7 End:n8 Function:n9 {:
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()));
             //nd.addHijo((Nodo)n6);

             if (n7 != null)
             nd.addHijo((Nodo)n7);
             nd.addHijo(new Nodo(n8.toString()+" "+n9.toString()));
             RESULT = nd;
             :}
            | 
            Function:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 CUERPO:n6 End:n7 Function:n8{:
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             :}
            |
             Function:n1 Identificador:n2 parentesisE:n3  parentesisC:n4 TIPODATO:n5 CUERPO:n6 End:n7 Function:n8{:
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + n3.toString()+""+n4.toString()));
            
             nd.addHijo((Nodo)n5);

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             :}  
            | 
            Function:n1 Identificador:n2 parentesisE:n3 parentesisC:n4 CUERPO:n5 End:n6 Function:n7{:
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + n3.toString()+" "+n4.toString()));
            

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             RESULT = nd;
             :};

SENTENCIA_BOOLEANA::=Identificador:n1  COMPARACION:n2 Identificador:n3{:
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :}
       |  
        Identificador:n1  COMPARACION:n2 Numero:n3 {:
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :}
       | 
        Identificador:n1  COMPARACION:n2 Op_Booleano:n3 {:
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :}
       | 
        Identificador:n1  COMPARACION:n2 Cadena:n3{:
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :}
       | Identificador:n1  COMPARACION:n2 Comilla:n3 Comilla:n4{:
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()+" "+n4.toString()));
             RESULT = nd;
             :};

COMPARACION::= OperadorRelacional:n1 {:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             
             RESULT = nd;
             :} 
            |
             Igual:n1{:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            
             RESULT = nd;
             :} ;

DECLARACION_IF::= LOGICOAND:n1 LOGICOOR:n2 {:
            Nodo nd = new Nodo("DECLARACION_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
            |
             parentesisE:n1 DECLARACION_IF:n2 parentesisC:n3{:
            Nodo nd = new Nodo("DECLARACION_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
            // nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :};

LOGICOOR::=  OR:n1 LOGICOAND:n2 LOGICOOR:n3 {:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
             | 
;

LOGICOAND::=    SENTENCIA_BOOLEANA:n1 LOGICOAND_Prima:n2{:
            Nodo nd = new Nodo("LOGICOAND");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :};

LOGICOAND_Prima::= And:n1 SENTENCIA_BOOLEANA:n2 LOGICOAND_Prima:n3 {:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
                   | 
;


SENTENCIA_IF::=  IF:n1 DECLARACION_IF:n2 then:n3 CUERPO:n4 End:n5 IF:n6{:
            Nodo nd = new Nodo("SENTENCIA_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
           //  nd.addHijo(new Nodo(n3.toString()));

             if (n4 != null)
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()+" "+n6.toString()));
             RESULT = nd;
             :};

ELSE_IF::= IF:n1 DECLARACION_IF:n2 then:n3 CUERPO:n4 Else:n5 CUERPO:n6 End:n7 IF:n8 {:
            Nodo nd = new Nodo("SENTENCIA_ELSE_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             //nd.addHijo(new Nodo(n3.toString()));

             if (n4 != null)
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()));

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             :};

ARITMETICOS::= MULTIPLICACIONES:n1 ADICIONES:n2{:
            Nodo nd = new Nodo("ARITMETICOS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :};

ADICIONES::=   OPRestSuma:n1 MULTIPLICACIONES:n2 ADICIONES:n3 {:
            Nodo nd = new Nodo("ADICIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
               | 
;

MULTIPLICACIONES::= VALORES_NUMERICOS:n1 MULTIPLICACIONES_PRIMA:n2{:
            Nodo nd = new Nodo("MULTIPLICACIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :} ;

MULTIPLICACIONES_PRIMA::= OPMultDiv:n1 VALORES_NUMERICOS:n2 MULTIPLICACIONES_PRIMA:n3{:
            Nodo nd = new Nodo("MULTIPLICACIONES_PRIMA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
               | 
;


VALORES_NUMERICOS::=  Numero:n1 {:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
          
             RESULT = nd;
             :}
                      | 
                        Identificador:n1 {:
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           
             RESULT = nd;
             :}
                      |  
            parentesisE:n1 ARITMETICOS:n2 parentesisC:n3{:
            Nodo nd = new Nodo("VALORES_NUMERICOS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           // nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
            // nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :};


OP_RECURSIVIDAD::= RECURSION:n1 {:
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             :}

               | 
                RECURSION:n1 OPRestSuma:n2 ARITMETICOS:n3{:
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
               | 
                RECURSION:n1 OPMultDiv:n2 ARITMETICOS:n3 {:
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
               | 
                ARITMETICOS:n1 OPRestSuma:n2 RECURSION:n3{:
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
               | 
                ARITMETICOS:n1 OPMultDiv:n2 RECURSION:n3{:
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :};

ASIGNACION::=  Identificador:n1 Igual:n2 DATO:n3{:
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()+n2.toString()));
            //nd.addHijo(new Nodo());
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
               | 
                Identificador:n1 Punto:n2 Identificador:n3 Igual:n4 DATO:n5 {:
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()));
           
             nd.addHijo((Nodo)n5);
             RESULT = nd;
             :}
               | 
                Identificador:n1 Igual:n2 RECURSION:n3{:
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString() + n2.toString() ));
            
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :};

IMPRIMIR::= Console:n1 Punto:n2 WriteLine:n3 parentesisE:n4 CONCATENACION:n5 parentesisC:n6 {:
            Nodo nd = new Nodo(n1.toString() + n2.toString() + n3.toString() );
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           // nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() ));
           // nd.addHijo(new Nodo(n4.toString()));
             //nd.addHijo((Nodo)n5);
             //nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             :};

LEER::=  Console:n1 Punto:n2 ReadLine:n3 parentesisE:n4 parentesisC:n5{:
             Nodo nd = new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString());
            //Nodo nd = new Nodo("LEER");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            //nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString()));
            //nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             RESULT = nd;
             :}; 

LLAMADA_FUNCION::= Identificador:n1 Punto:n2 Identificador:n3 parentesisE:n4  parentesisC:n5 {:
            Nodo nd = new Nodo("LLAMADA_FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
          
            nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString() ));
     
             RESULT = nd;
             :}
                   | 
                    Identificador:n1 Punto Identificador:n2 parentesisE:n3 PARAMETROS2:n4 parentesisC:n5{:
            Nodo nd = new Nodo("LLAMADA_FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            nd.addHijo(new Nodo(n2.toString()));
            //nd.addHijo(new Nodo(n3.toString()));;
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             :} ;

CONCATENACION::=  Cadena:n1 CONCATENABLES:n2 CONCATENACION:n3 {:
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
                  | ARITMETICOS:n1 CONCATENABLES:n2 CONCATENACION:n3 {:
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             :}
                  | Identificador:n1 Punto:n2 Identificador:n3 CONCATENABLES:n4 CONCATENACION:n5 {:
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
           // nd.addHijo(new Nodo(n2.toString()));
            nd.addHijo(new Nodo(n3.toString()));
             //nd.addHijo((Nodo)n4);
             nd.addHijo((Nodo)n5);
             RESULT = nd;
             :}
                  |Cadena:n1 {:
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             :}
                  | ARITMETICOS:n1{:
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             :}
                  | Identificador:n1 Punto:n2 Identificador:n3{:
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            //nd.addHijo(new Nodo(n2.toString()));
            nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             :};

CONCATENABLES::= concatenacion:n1 {:
            Nodo nd = new Nodo("CONCATENABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             :}
            | coma:n1{:
            Nodo nd = new Nodo("CONCATENABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             :};


CUERPO::=  DECLARACION:n1 Enter  CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);

             RESULT = nd;
             :}
           | IMPRIMIR:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | ASIGNACION:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | SENTENCIA_IF:n1 Enter  CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);


              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | ELSE_IF:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             
              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | DECLARACION_FOR:n1 Enter  CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | WHILE:n1 Enter  CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | DO_WHILE:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);


              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | RETORNO:n1 Enter  CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | LEER:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | LLAMADA_FUNCION:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | Comentario:n1 Enter CUERPO:n2 {:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));

               if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             :}
           | RECURSION:n1 Enter{:
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             :}
           | Enter:x CUERPO:n2{:
    
           

            if (n2 != null)
            RESULT = n2;

           :}
           |
;


RECURSION::= Identificador:n1 parentesisE:n2 PARAMETROS2:n3 parentesisC:n4 {:
            Nodo nd = new Nodo("RECURSION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              //nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             //nd.addHijo(new Nodo(n4.toString()));
             RESULT = nd;
             :}
            | Identificador:n1 parentesisE:n2 parentesisC:n3{:
            Nodo nd = new Nodo("RECURSION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
             // nd.addHijo(new Nodo(n2.toString()+" "+n3.toString()));
             RESULT = nd;
             :};

DECLARACION_FOR::= For:n1 ASIGNACION:n2 TO:n3 Numero:n4 CUERPO:n5 Next:n6 {:
            Nodo nd = new Nodo("FOR");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);
              nd.addHijo(new Nodo(n3.toString() + " " + n4.toString() ));
              

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             :} ;

WHILE::= While:n1 DECLARACION_IF:n2 CUERPO:n3 End:n4 While:n5 {:
            Nodo nd = new Nodo("WHILE");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);


              if (n3 != null)
              nd.addHijo((Nodo)n3);
              nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             RESULT = nd;
             :}  ;

DO_WHILE::= Do:n1 While:n2 DECLARACION_IF:n3 CUERPO:n4 Loop:n5  {:
            Nodo nd = new Nodo("DO_WHILE");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString() + " " + n2.toString()));
              
              nd.addHijo((Nodo)n3);

              if (n4 != null)
              nd.addHijo((Nodo)n4);
              nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             :} ;

    FINAL::= End:n1 SentenciaModulo:n2{:

        Nodo nd = new Nodo("FINAL");
        nd.setNumNodo(parser.contador++);
        parser.contador++;

        nd.addHijo(new Nodo(n1.toString() + " " + n2.toString()));
       
         
        RESULT = nd;


:};


DESPUES::= Enter DESPUES | Enter;

PROGRAMA::= Enter PROGRAMA | INICIO | INICIO DESPUES ;
